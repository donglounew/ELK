input {
  if  [type]  == "apache_access_log" {
    	redis {
        	host => "172.17.91.157"
        	port => 6379
        	key => "logstash:redis"
        	data_type => "list"
		threads => 50
    	}
  }
}

filter {
  if  [type]  == "apache_access_log" {
     json {
       source => "message"
       remove_field => "message"
     }
  }
}

output {
  if  [type]  == "apache_access_log" {
        elasticsearch {
                hosts => ["http://172.17.91.157:9200"]
                index => "logstash-nginx-%{+YYYY.MM.dd}"
                document_type => "nginx"
                workers => 1
                idle_flush_time => 10
        }
	stdout {codec => rubydebug}
  }
}

input {
  if  [type]  == "mysql_query_log" {
        redis {
                host => "172.17.91.157"
                port => 6379
                key => "logstash:redis"
                data_type => "list"
                threads => 50
        }
  }
}
filter {
  if [type] == "mysql_query_log" {
  grok {
   match => [ "message", "(?m)^# User@Host: %{USER:query_user}\[[^\]]+\] @ (?:(?<query_host>\S*) )?\[(?:%{IP:query_ip})?\]\s*Id: %{NUMBER:id:int}\s+# Query_time: %{NUMBER:query_time:float}\s+Lock_time: %{NUMBER:lock_time:float}\s+Rows_sent: %{NUMBER:rows_sent:int}\s+Rows_examined: %{NUMBER:rows_examined:int}\s*(?:use %{DATA:database};\s*)?SET timestamp=%{NUMBER:timestamp};\s*(?<query>(?<action>\w+)\s+.*)" ]
  }
  }
}
  grok {
    match => { "message" => "# Time: " }
    add_tag => [ "drop" ]
    tag_on_failure =>[]
  }
  if "drop" in [tags] {
    drop {}
  }
  date {
    match => [ "timestamp", "UNIX", "YYYY-MM-dd HH:mm:ss"]
    remove_field => [ "timestamp" ]
  }
  }
}

output {
  if  [type]  == "mysql_query_log" {
        elasticsearch {
                hosts => ["http://172.17.91.157:9200"]
                index => "logstash-mysql-%{+YYYY.MM.dd}"
                document_type => "mysql"
                workers => 1
                idle_flush_time => 10
		sniffing => true
      		manage_template => false
      		template_overwrite => true
        }
        stdout {codec => rubydebug}
  }
}
